### ==============================================
### FULL CYCLE TEST
### Step by Step: 회원가입 -> 로그인 -> 주문 -> 주문 취소 -> 회원탈퇴
### ==============================================

### STEP 1: 회원가입 (Sign Up)
POST http://localhost:8080/api/members/register
Content-Type: application/json

{
  "userId": "testuser001",
  "name": "김테스트",
  "phoneNumber": "010-2408-9999",
  "gender": "MALE",
  "birthDate": "1990-05-15"
}

> {%
    client.test("회원가입 성공", function() {
        client.assert(response.status === 201, "Expected status 201");
        client.assert(response.body.success === true, "Expected success true");
    });
%}


### STEP 2: 로그인 (Login)
POST http://localhost:8080/api/auth/login
Content-Type: application/json

{
  "phoneNumber": "010-2408-9999",
  "userId": "testuser001"
}

> {%
    client.test("로그인 성공 및 토큰 저장", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        client.assert(response.body.data.tokens.accessToken, "Expected access token");

        // Store the token for subsequent requests
        client.global.set("access_token", response.body.data.tokens.accessToken);
        console.log("Access Token stored:", response.body.data.tokens.accessToken);
    });
%}


### STEP 3: 토큰 검증 (Validate Token)
POST http://localhost:8080/api/auth/validate?token={{access_token}}
Authorization: Bearer {{access_token}}

> {%
    client.test("토큰 검증 성공", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        client.assert(response.body.data.valid === true, "Expected valid token");
        client.assert(response.body.data.tokenInfo.userId === "testuser001", "Expected correct user ID");
    });
%}

### STEP 4: 주문 생성 (Place Order)
POST http://localhost:8080/api/orders
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "idempotencyKey": "full-cycle-test-{{$timestamp}}",
  "items": [
    {
      "productId": 1,
      "quantity": 2
    },
    {
      "productId": 2,
      "quantity": 2
    }
  ]
}

> {%
    client.test("주문 생성 성공", function() {
        client.assert(response.status === 200 || response.status === 201, "Expected status 200 or 201");
        client.assert(response.body.success === true, "Expected success true");
        client.assert(response.body.data.orderId, "Expected order ID");

        // Store order ID for cancellation
        client.global.set("order_id", response.body.data.orderId);
        console.log("Order created with ID:", response.body.data.orderId);
        console.log("Order status:", response.body.data.status);
        console.log("Total amount:", response.body.data.totalAmount);
    });
%}

### STEP 5: 주문 상세 조회 (Check Order Details)
GET http://localhost:8080/api/orders/{{order_id}}
Authorization: Bearer {{access_token}}

> {%
    client.test("주문 상세 조회 성공", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        client.assert(response.body.data.orderId == client.global.get("order_id"), "Expected correct order ID");

        console.log("Order details verified:");
        console.log("- Order ID:", response.body.data.orderId);
        console.log("- Status:", response.body.data.status);
        console.log("- Items count:", response.body.data.items.length);
        console.log("- Total amount:", response.body.data.totalAmount);
    });
%}


### STEP 6: 내 주문 목록 조회 (My Orders List)
GET http://localhost:8080/api/orders?page=0&size=10
Authorization: Bearer {{access_token}}

> {%
    client.test("주문 목록 조회 성공", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        client.assert(response.body.data.content.length > 0, "Expected at least one order");

        const orderExists = response.body.data.content.some(order =>
            order.orderId == client.global.get("order_id"));
        client.assert(orderExists, "Expected to find the created order in list");
        console.log("Found", response.body.data.content.length, "orders in user's history");
    });
%}

### STEP 7: 주문 취소 (Cancel Order)
DELETE http://localhost:8080/api/orders/{{order_id}}
Authorization: Bearer {{access_token}}

> {%
    client.test("주문 취소 성공", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        console.log("Order cancelled successfully");
        console.log("Cancelled order ID:", client.global.get("order_id"));
    });
%}


### STEP 8: 취소된 주문 확인 (Verify Cancellation)
GET http://localhost:8080/api/orders/{{order_id}}
Authorization: Bearer {{access_token}}

> {%
    client.test("주문 취소 상태 확인", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        client.assert(response.body.data.status === "CANCELLED", "Expected order status to be CANCELLED");
        console.log("Cancellation verified - Order status:", response.body.data.status);
    });
%}

### STEP 9 : 회원 탈퇴 (Optional - Delete Test Account)
DELETE http://localhost:8080/api/members/withdraw
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "withdrawalReason": "Testing withdrawal process"
}

> {%
    client.test("회원 탈퇴 성공", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        console.log("Test account withdrawn successfully");
    });
%}

### STEP 10 : 회원탈퇴 취소 (Cancel Withdrawal)
POST http://localhost:8080/api/members/withdraw/cancel
Authorization: Bearer {{access_token}}

> {%
    client.test("회원탈퇴 취소 성공", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(response.body.success === true, "Expected success true");
        client.assert(response.body.message === "탈퇴 요청이 취소되었습니다. 계정이 다시 활성화되었습니다.", "Expected correct message");
        client.assert(response.body.data.status === "ACTIVE", "Expected member status to be ACTIVE");
        console.log("Withdrawal cancellation successful");
        console.log("Member status:", response.body.data.memberStatus);
        console.log("User ID:", response.body.data.userId);
    });
%}

